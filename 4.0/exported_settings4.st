StartupLoader default executeAtomicItems: {
	StartupAction name: 'One line messages' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #oneLineMessages: with: (''#(#to: #to:do: #to:by: #to:by:do:)'')' runOnce: true.
	StartupAction name: 'Multi line messages' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #multiLineMessages: with: (''#(#ifTrue:ifFalse: #ifFalse:ifTrue: #ifTrue: #ifFalse: #on:do: #ensure: #ifCurtailed:)'')' runOnce: true.
	StartupAction name: 'Minimum new lines between statements' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #minimumNewLinesBetweenStatements: with: (1)' runOnce: true.
	StartupAction name: 'New line after cascade' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #newLineAfterCascade: with: (true)' runOnce: true.
	StartupAction name: 'New line before first cascade' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #newLineBeforeFirstCascade: with: (true)' runOnce: true.
	StartupAction name: 'New line before first keyword' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #newLineBeforeFirstKeyword: with: (false)' runOnce: true.
	StartupAction name: 'New lines after method comment' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #newLinesAfterMethodComment: with: (2)' runOnce: true.
	StartupAction name: 'New lines after method pattern' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #newLinesAfterMethodPattern: with: (1)' runOnce: true.
	StartupAction name: 'New lines after temporaries' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #newLinesAfterTemporaries: with: (1)' runOnce: true.
	StartupAction name: 'Number of arguments for multi line' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #numberOfArgumentsForMultiLine: with: (4)' runOnce: true.
	StartupAction name: 'Periods as terminators' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #periodsAsTerminators: with: (false)' runOnce: true.
	StartupAction name: 'Periods at end of block' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #periodsAtEndOfBlock: with: (false)' runOnce: true.
	StartupAction name: 'Periods at end of method' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #periodsAtEndOfMethod: with: (false)' runOnce: true.
	StartupAction name: 'Retain blank lines between statements' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #retainBlankLinesBetweenStatements: with: (false)' runOnce: true.
	StartupAction name: 'Retain blank lines before comments' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #retainBlankLinesBeforeComments: with: (false)' runOnce: true.
	StartupAction name: 'String following return' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #stringFollowingReturn: with: ('' '')' runOnce: true.
	StartupAction name: 'String inside blocks' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #stringInsideBlocks: with: ('' '')' runOnce: true.
	StartupAction name: 'String inside parentheses' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #stringInsideParentheses: with: ('''')' runOnce: true.
	StartupAction name: 'Traditional binary precedence' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #traditionalBinaryPrecedence: with: (''#(#($| $& $?) #($= $~ $< $>) #($- $+) #($* $/ $% $\) #($@))'')' runOnce: true.
	StartupAction name: 'Use traditional binary precedence for parentheses' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #useTraditionalBinaryPrecedenceForParentheses: with: (true)' runOnce: true.
	StartupAction name: 'Format methods on display' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #formatOnDisplay: with: (false)' runOnce: true.
	StartupAction name: 'Format methods on accept' code: '(Smalltalk at: #RBConfigurableFormatter) perform: #formatOnAccept: with: (false)' runOnce: true.
	StartupAction name: 'Undo size' code: '(Smalltalk at: #RBRefactoryChangeManager) perform: #undoSize: with: (20)' runOnce: true.
	StartupAction name: 'Maximum size of the methods list' code: '((Smalltalk at: #RecentMessageList) perform: #uniqueInstance) perform: #maxListSize: with: (100)' runOnce: true.
	StartupAction name: 'Font' code: '(Smalltalk at: #RubAbstractTextArea) perform: #editorFont: with: ((LogicalFont familyName: ''Source Code Pro'' fallbackFamilyNames: nil pointSize: 10 stretchValue: 5 weightValue: 400 slantValue: 0))' runOnce: true.
	StartupAction name: 'Background' code: '(Smalltalk at: #RubAbstractTextArea) perform: #backgroundColor: with: ((Color r: 1.0 g: 1.0 b: 1.0 alpha: 1.0))' runOnce: true.
	StartupAction name: 'Text color' code: '(Smalltalk at: #RubAbstractTextArea) perform: #textColor: with: ((Color r: 0.0 g: 0.0 b: 0.0 alpha: 1.0))' runOnce: true.
	StartupAction name: 'Line numbers font' code: '(Smalltalk at: #RubAbstractTextArea) perform: #lineNumbersFont: with: ((LogicalFont familyName: ''Source Sans Pro'' fallbackFamilyNames: nil pointSize: 10 stretchValue: 5 weightValue: 400 slantValue: 0))' runOnce: true.
	StartupAction name: 'Line numbers color' code: '(Smalltalk at: #RubAbstractTextArea) perform: #lineNumbersTextColor: with: ((Color r: 0.25 g: 0.25 b: 0.25 alpha: 1.0))' runOnce: true.
	StartupAction name: 'Line numbers background color' code: '(Smalltalk at: #RubAbstractTextArea) perform: #lineNumbersBackgroundColor: with: ((Color r: 0.9560000000000001 g: 0.9560000000000001 b: 0.9560000000000001 alpha: 1.0))' runOnce: true.
	StartupAction name: 'Fixed color' code: '(Smalltalk at: #RubCursor) perform: #cursorWithFixedColor: with: (false)' runOnce: true.
	StartupAction name: 'Color' code: '(Smalltalk at: #RubCursor) perform: #defaultColor: with: ((Color r: 0.625 g: 0.625 b: 0.625 alpha: 1.0))' runOnce: true.
	StartupAction name: 'Width' code: '(Smalltalk at: #RubCursor) perform: #defaultWidth: with: (2)' runOnce: true.
	StartupAction name: 'Blinking period' code: '(Smalltalk at: #RubCursor) perform: #period: with: (698)' runOnce: true.
	StartupAction name: #'Syntax Highlighting' code: '(Smalltalk at: #SHPreferences) perform: #enabled: with: (true)' runOnce: true.
	StartupAction name: 'Selector Patterns' code: '(Smalltalk at: #SHPreferences) perform: #selectorPatternsStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#patternKeyword #patternBinary #patternUnary ); instVarAt: 2 put: nil; instVarAt: 3 put: #bold; yourself))' runOnce: true.
	StartupAction name: 'Syntactic error' code: '(Smalltalk at: #SHPreferences) perform: #errorStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#invalid #excessCode #undefinedKeyword #undefinedBinary #undefinedUnary #undefinedIdentifier ); instVarAt: 2 put: (Color r: 1.0 g: 0.0 b: 0.0 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Parameters' code: '(Smalltalk at: #SHPreferences) perform: #argsStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#patternArg #methodArg #blockPatternArg #blockArg #argument ); instVarAt: 2 put: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Comments' code: '(Smalltalk at: #SHPreferences) perform: #commentStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#comment #unfinishedComment ); instVarAt: 2 put: (Color r: 0.42 g: 0.42 b: 0.42 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Default' code: '(Smalltalk at: #SHPreferences) perform: #defaultStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#default ); instVarAt: 2 put: (Color r: 0.0 g: 0.0 b: 0.0 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Global variables' code: '(Smalltalk at: #SHPreferences) perform: #globalVarStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#globalVar #poolConstant ); instVarAt: 2 put: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Instance/class variables' code: '(Smalltalk at: #SHPreferences) perform: #instanceVarStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#instVar #classVar ); instVarAt: 2 put: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Message sends' code: '(Smalltalk at: #SHPreferences) perform: #messageSendsStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#keyword #binary #unary #incompleteKeyword #incompleteBinary #incompleteUnary ); instVarAt: 2 put: (Color r: 0.0 g: 0.0 b: 0.0 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Primitive or module' code: '(Smalltalk at: #SHPreferences) perform: #primitiveOrModuleStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#primitive #externalFunctionCallingConvention #module #externalCallType #externalCallTypePointerIndicator #primitiveOrExternalCallStart #primitiveOrExternalCallEnd ); instVarAt: 2 put: (Color r: 0.0 g: 0.5 b: 0.0 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Primitive types' code: '(Smalltalk at: #SHPreferences) perform: #primitiveTypesStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#''$'' #character #integer #number #- #symbol #stringSymbol #literalArray #string #unfinishedString ); instVarAt: 2 put: (Color r: 0.5 g: 0.0 b: 0.0 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Reserved words' code: '(Smalltalk at: #SHPreferences) perform: #reservedWordsStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#self #super #true #false #nil #thisContext ); instVarAt: 2 put: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Syntax' code: '(Smalltalk at: #SHPreferences) perform: #syntaxStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#assignment #ansiAssignment #literal #return #blockArgColon #leftParenthesis #rightParenthesis #leftParenthesis1 #rightParenthesis1 #leftParenthesis2 #rightParenthesis2 #leftParenthesis3 #rightParenthesis3 #leftParenthesis4 #rightParenthesis4 #leftParenthesis5 #rightParenthesis5 #leftParenthesis6 #rightParenthesis6 #leftParenthesis7 #rightParenthesis7 #blockStart #blockEnd #blockStart1 #blockEnd1 #blockStart2 #blockEnd2 #blockStart3 #blockEnd3 #blockStart4 #blockEnd4 #blockStart5 #blockEnd5 #blockStart6 #blockEnd6 #blockStart7 #blockEnd7 #arrayStart #arrayEnd #arrayStart1 #arrayEnd1 #byteArrayStart #byteArrayEnd #byteArrayStart1 #byteArrayEnd1 #leftBrace #rightBrace #cascadeSeparator #statementSeparator #methodTempBar #blockTempBar #blockArgsBar ); instVarAt: 2 put: nil; instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'Variable' code: '(Smalltalk at: #SHPreferences) perform: #variableStyle: with: ((SHStyleElement basicNew instVarAt: 1 put: #(#blockTempVar #blockPatternTempVar #workspaceVar #tempVar #patternTempVar #incompleteIdentifier ); instVarAt: 2 put: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0); instVarAt: 3 put: nil; yourself))' runOnce: true.
	StartupAction name: 'AST based coloring' code: '(Smalltalk at: #SHRBTextStyler) perform: #useAstColoring: with: (false)' runOnce: true.
	StartupAction name: 'Enable ShoreLine Reporter' code: '(Smalltalk at: #SlReporter) perform: #enabled: with: (true)' runOnce: true.
}.

